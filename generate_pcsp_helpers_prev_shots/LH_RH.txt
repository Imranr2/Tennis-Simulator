TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p: ServeT_in{ball=5} -> Ply2_BackHandR  
			p: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p: ServeT_in{ball=5} -> Ply2_BackHandR  
			p: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p: ServeWide_in{ball=4} -> Ply2_BackHandR
			p: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p: ServeWide_in{ball=4} -> Ply2_BackHandR
			p: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p: FH_InsideOut{ball=6} -> Ply2_de_stroke
			p: FH_InsideIn{ball=4} -> Ply2_ad_stroke
			p: FH_CrossCourt{ball=4} -> Ply2_ad_stroke
			p: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p: FH_CrossCourt{ball=4} -> Ply2_ad_stroke
			p: FH_DownLine{ball=6} -> Ply2_de_stroke
			p: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p: BH_CrossCourt{ball=6} -> Ply2_de_stroke
			p: BH_DownLine{ball=4} -> Ply2_ad_stroke
			p: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p: BH_CrossCourt{ball=6} -> Ply2_de_stroke
			p: BH_InsideIn{ball=6} -> Ply2_de_stroke
			p: BH_InsideOut{ball=4} -> Ply2_ad_stroke
			p: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// deuce stroke is when player1 hit position is 1
Ply1_de_stroke = pcase{
			p: FH_FH_InsideOut{ball=6} -> Ply2_de_stroke
			p: FH_FH_InsideIn{ball=4} -> Ply2_ad_stroke
			p: FH_FH_DownMid{ball=5} -> Ply2_mid_stroke

			p: FH_BH_InsideOut{ball=6} -> Ply2_de_stroke
			p: FH_BH_InsideIn{ball=4} -> Ply2_ad_stroke
			p: FH_BH_DownMid{ball=5} -> Ply2_mid_stroke

			p: BH_BH_Crosscourt{ball=6} -> Ply2_de_stroke
			p: BH_BH_Downline{ball=4} -> Ply2_ad_stroke
			p: BH_BH_DownMid{ball=5} -> Ply2_mid_stroke		


			p: BH_FH_Crosscourt{ball=6} -> Ply2_de_stroke
			p: BH_FH_Downline{ball=4} -> Ply2_ad_stroke
			p: BH_FH_DownMid{ball=5} -> Ply2_mid_stroke		
				
			p: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_stroke = pcase{
			p: FH_FH_InsideOut{ball=6} -> Ply2_de_stroke
			p: FH_FH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p: FH_FH_DownMid{ball=5} -> Ply2_mid_stroke

			p: FH_BH_InsideOut{ball=6} -> Ply2_de_stroke
			p: FH_BH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p: FH_BH_DownMid{ball=5} -> Ply2_mid_stroke

			p: BH_BH_InsideOut{ball=4} -> Ply2_ad_stroke
			p: BH_BH_Crosscourt{ball=6} -> Ply2_de_stroke
			p: BH_BH_DownMid{ball=5} -> Ply2_mid_stroke

			p: BH_FH_InsideOut{ball=4} -> Ply2_ad_stroke
			p: BH_FH_Crosscourt{ball=6} -> Ply2_de_stroke
			p: BH_FH_DownMid{ball=5} -> Ply2_mid_stroke
			p: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_stroke = pcase{
			p: FH_FH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p: FH_FH_Downline{ball=6} -> Ply2_de_stroke
			p: FH_FH_DownMid{ball=5} -> Ply2_mid_stroke

			p: FH_BH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p: FH_BH_Downline{ball=6} -> Ply2_de_stroke
			p: FH_BH_DownMid{ball=5} -> Ply2_mid_stroke

			p: BH_BH_InsideIn{ball=6} -> Ply2_de_stroke
			p: BH_BH_InsideOut{ball=4} -> Ply2_ad_stroke
			p: BH_BH_DownMid{ball=5} -> Ply2_mid_stroke

			p: BH_FH_InsideIn{ball=6} -> Ply2_de_stroke
			p: BH_FH_InsideOut{ball=4} -> Ply2_ad_stroke
			p: BH_FH_DownMid{ball=5} -> Ply2_mid_stroke
			p: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};


De_Ply2Serve = pcase {
			p66 : ServeT_in{ball=2} -> Ply1_ForeHandR
			p: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p: ServeWide_in{ball=1} -> Ply1_BackHandR
			p: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p: ServeT_in{ball=2} -> Ply1_ForeHandR
			p: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p: ServeWide_in{ball=1} -> Ply1_BackHandR
			p: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p: ServeT_in{ball=2} -> Ply1_BackHandR
			p: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p: ServeWide_in{ball=3} -> Ply1_ForeHandR
			p: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p: ServeT_in{ball=2} -> Ply1_BackHandR
			p: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p: ServeWide_in{ball=3} -> Ply1_ForeHandR
			p: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p: FH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p: FH_DownLine { ball = 3} -> Ply1_ad_stroke
			p: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p: FH_InsideOut{ ball = 3} -> Ply1_ad_stroke
			p: FH_InsideIn{ball = 1} -> Ply1_de_stroke
			p: FH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p: BH_CrossCourt{ ball = 3} -> Ply1_ad_stroke
			p: BH_InsideIn{ball = 3} -> Ply1_ad_stroke
			p: BH_InsideOut{ ball = 1} -> Ply1_de_stroke
			p: BH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p: BH_CrossCourt{ ball = 3} -> Ply1_ad_stroke
			p: BH_DownLine{ ball = 1} -> Ply1_de_stroke
			p: BH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// deuce stroke is when player2 hit position is 6
Ply2_de_stroke = pcase { // if already 
			p: FH_FH_Crosscourt { ball = 1;} -> Ply1_de_stroke
			p: FH_FH_Downline { ball = 3} -> Ply1_ad_stroke
			p: FH_FH_DownMid { ball = 2} -> Ply1_mid_stroke

			p: FH_BH_Crosscourt { ball = 1;} -> Ply1_de_stroke
			p: FH_BH_Downline { ball = 3} -> Ply1_ad_stroke
			p: FH_BH_DownMid { ball = 2} -> Ply1_mid_stroke

			p: BH_BH_InsideIn {ball = 3} -> Ply1_ad_stroke
			p: BH_BH_InsideOut { ball = 1} -> Ply1_de_stroke
			p: BH_BH_DownMid { ball = 2} -> Ply1_mid_stroke

			p: BH_FH_InsideIn {ball = 3} -> Ply1_ad_stroke
			p: BH_FH_InsideOut { ball = 1} -> Ply1_de_stroke
			p: BH_FH_DownMid { ball = 2} -> Ply1_mid_stroke
			p: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_stroke = noMove -> pcase{
			p: FH_FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p: FH_FH_Crosscourt{ball = 1} -> Ply1_de_stroke
			p: FH_FH_DownMid { ball = 2 } -> Ply1_mid_stroke

			p: FH_BH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p: FH_BH_Crosscourt{ball = 1} -> Ply1_de_stroke
			p: FH_BH_DownMid { ball = 2 } -> Ply1_mid_stroke

			p: BH_BH_InsideOut { ball = 1} -> Ply1_de_stroke
			p: BH_BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p: BH_BH_DownMid { ball = 2} -> Ply1_mid_stroke

			p: BH_FH_InsideOut { ball = 1} -> Ply1_de_stroke
			p: BH_FH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p: BH_FH_DownMid { ball = 2} -> Ply1_mid_stroke
			p: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_stroke = pcase{
			p: FH_FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p: FH_FH_InsideIn { ball = 1} -> Ply1_de_stroke
			p: FH_FH_DownMid { ball = 2} -> Ply1_mid_stroke

			p: FH_BH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p: FH_BH_InsideIn { ball = 1} -> Ply1_de_stroke
			p: FH_BH_DownMid { ball = 2} -> Ply1_mid_stroke

			p: BH_BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p: BH_BH_Downline { ball = 1} -> Ply1_de_stroke
			p: BH_BH_DownMid { ball = 2 } -> Ply1_mid_stroke

			p: BH_FH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p: BH_FH_Downline { ball = 1} -> Ply1_de_stroke
			p: BH_FH_DownMid { ball = 2 } -> Ply1_mid_stroke
			p: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};    		             

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;