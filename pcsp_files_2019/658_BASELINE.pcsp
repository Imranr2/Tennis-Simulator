enum{f_ad_ct, f_de_ct, n_ad_ct, n_de_ct}; //serve position: ad court or deuce court
enum{player1, player2, na};

var turn = na; //serve turn;
var fscore = 0;
var nscore = 0;
var won = na;
var ball = 9;
var points = 7;
#define p0 603;
#define p1 135;
#define p2 780;
#define p3 375;
#define p4 1041;
#define p5 379;
#define p6 282;
#define p7 303;
#define p8 19;
#define p9 58;
#define p10 510;
#define p11 78;
#define p12 739;
#define p13 282;
#define p14 1025;
#define p15 239;
#define p16 226;
#define p17 475;
#define p18 18;
#define p19 67;
#define p20 187;
#define p21 79;
#define p22 415;
#define p23 30;
#define p24 264;
#define p25 178;
#define p26 18;
#define p27 62;
#define p28 389;
#define p29 15;
#define p30 223;
#define p31 279;
#define p32 165;
#define p33 97;
#define p34 802;
#define p35 21;
#define p36 397;
#define p37 802;
#define p38 59;
#define p39 484;
#define p40 27;
#define p41 376;
#define p42 850;
#define p43 657;
#define p44 644;
#define p45 5;
#define p46 1;
#define p47 4;
#define p48 320;
#define p49 690;
#define p50 829;
#define p51 877;
#define p52 591;
#define p53 114;
#define p54 313;
#define p55 294;
#define p56 652;
#define p57 608;
#define p58 394;
#define p59 282;
#define p60 112;
#define p61 1993;
#define p62 585;
#define p63 1118;
#define p64 477;
#define p65 1034;
#define p66 779;
#define p67 253;
#define p68 649;
#define p69 346;
#define p70 1207;
#define p71 421;
#define p72 479;
#define p73 185;
#define p74 11;
#define p75 111;
#define p76 576;
#define p77 167;
#define p78 819;
#define p79 245;
#define p80 1181;
#define p81 152;
#define p82 295;
#define p83 628;
#define p84 14;
#define p85 92;
#define p86 231;
#define p87 98;
#define p88 431;
#define p89 37;
#define p90 410;
#define p91 205;
#define p92 6;
#define p93 43;
#define p94 378;
#define p95 15;
#define p96 240;
#define p97 155;
#define p98 58;
#define p99 100;
#define p100 637;
#define p101 15;
#define p102 299;
#define p103 561;
#define p104 58;
#define p105 377;
#define p106 21;
#define p107 360;
#define p108 881;
#define p109 649;
#define p110 616;
#define p111 5;
#define p112 3;
#define p113 5;
#define p114 224;
#define p115 755;
#define p116 1051;
#define p117 960;
#define p118 537;
#define p119 158;
#define p120 601;
#define p121 392;
#define p122 421;
#define p123 748;
#define p124 457;
#define p125 206;
#define p126 58;
#define p127 2159;
#define p128 521;
#define p129 839;
#define p130 375;
#define p131 1084;
TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_BackHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_BackHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_BackHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_BackHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_CrossCourt{ball=6} -> Ply2_de_stroke
			p21: FH_DownLine{ball=4} -> Ply2_ad_stroke
			p22: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p23: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p24: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p25: FH_InsideOut{ball =4} -> Ply2_ad_stroke
			p26: FH_InsideIn{ball=6} -> Ply2_de_stroke
			p27: FH_CrossCourt{ball=6} -> Ply2_de_stroke
			p28: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=4} -> Ply2_ad_stroke
			p32: BH_InsideIn{ball=4} -> Ply2_ad_stroke
			p33: BH_InsideOut{ball=6} -> Ply2_de_stroke
			p34: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p35: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p36: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p37: BH_CrossCourt{ball=4} -> Ply2_ad_stroke
			p38: BH_DownLine{ball=6} -> Ply2_de_stroke
			p39: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// deuce stroke is when player1 hit position is 1
Ply1_de_stroke = pcase{
			p42: FH_Crosscourt{ball=6} -> Ply2_de_stroke
			p43: FH_Downline{ball=4} -> Ply2_ad_stroke
			p44: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p45: BH_InsideIn{ball=4} -> Ply2_ad_stroke
			p46: BH_InsideOut{ball=6} -> Ply2_de_stroke
			p47: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p48: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p49: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_stroke = pcase{
			p50: FH_InsideOut{ball=4} -> Ply2_ad_stroke
			p51: FH_Crosscourt{ball=6} -> Ply2_de_stroke
			p52: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p53: BH_InsideOut{ball=6} -> Ply2_de_stroke
			p54: BH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p55: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p56: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p57: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_stroke = pcase{
			p58: FH_InsideOut{ball=4} -> Ply2_ad_stroke
			p59: FH_InsideIn{ball=6} -> Ply2_de_stroke
			p60: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p61: BH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p62: BH_Downline{ball=6} -> Ply2_de_stroke
			p63: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p64: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p65: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};


De_Ply2Serve = pcase {
			p66 : ServeT_in{ball=2} -> Ply1_BackHandR
			p67: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p68: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p69: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p70: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p71: ServeT_in{ball=2} -> Ply1_BackHandR
			p72: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p73: ServeWide_in{ball=1} -> Ply1_ForeHandR
			p74: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p75: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p76: ServeT_in{ball=2} -> Ply1_ForeHandR
			p77: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p78: ServeWide_in{ball=3} -> Ply1_BackHandR
			p79: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p80: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p81: ServeT_in{ball=2} -> Ply1_ForeHandR
			p82: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p83: ServeWide_in{ball=3} -> Ply1_BackHandR
			p84: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p85: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p86: FH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p87: FH_DownLine { ball = 3} -> Ply1_ad_stroke
			p88: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p89: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p90: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p91: FH_InsideOut{ ball = 3} -> Ply1_ad_stroke
			p92: FH_InsideIn{ball = 1} -> Ply1_de_stroke
			p93: FH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p94: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p95: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p96: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p97: BH_CrossCourt{ ball = 3} -> Ply1_ad_stroke
			p98: BH_InsideIn{ball = 3} -> Ply1_ad_stroke
			p99: BH_InsideOut{ ball = 1} -> Ply1_de_stroke
			p100: BH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p101: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p102: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p103: BH_CrossCourt{ ball = 3} -> Ply1_ad_stroke
			p104: BH_DownLine{ ball = 1} -> Ply1_de_stroke
			p105: BH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p106: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p107: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// deuce stroke is when player2 hit position is 6
Ply2_de_stroke = pcase { // if already 
			p108: FH_Crosscourt { ball = 1;} -> Ply1_de_stroke
			p109: FH_Downline { ball = 3} -> Ply1_ad_stroke
			p110: FH_DownMid { ball = 2} -> Ply1_mid_stroke
			p111: BH_InsideIn {ball = 3} -> Ply1_ad_stroke
			p112: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			p113: BH_DownMid { ball = 2} -> Ply1_mid_stroke
			p114: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p115: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_stroke = noMove -> pcase{
			p116: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p117: FH_Crosscourt{ball = 1} -> Ply1_de_stroke
			p118: FH_DownMid { ball = 2 } -> Ply1_mid_stroke
			p119: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			p120: BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p121: BH_DownMid { ball = 2} -> Ply1_mid_stroke
			p122: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p123: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_stroke = pcase{
			p124: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p125: FH_InsideIn { ball = 1} -> Ply1_de_stroke
			p126: FH_DownMid { ball = 2} -> Ply1_mid_stroke
			p127: BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p128: BH_Downline { ball = 1} -> Ply1_de_stroke
			p129: BH_DownMid { ball = 2 } -> Ply1_mid_stroke
			p130: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p131: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};    		             

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;