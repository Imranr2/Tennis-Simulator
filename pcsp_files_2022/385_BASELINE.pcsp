enum{f_ad_ct, f_de_ct, n_ad_ct, n_de_ct}; //serve position: ad court or deuce court
enum{player1, player2, na};

var turn = na; //serve turn;
var fscore = 0;
var nscore = 0;
var won = na;
var ball = 9;
var points = 7;
#define p0 140;
#define p1 61;
#define p2 39;
#define p3 15;
#define p4 228;
#define p5 131;
#define p6 57;
#define p7 3;
#define p8 1;
#define p9 36;
#define p10 49;
#define p11 64;
#define p12 139;
#define p13 27;
#define p14 172;
#define p15 11;
#define p16 39;
#define p17 90;
#define p18 2;
#define p19 30;
#define p20 8;
#define p21 6;
#define p22 10;
#define p23 94;
#define p24 1;
#define p25 24;
#define p26 48;
#define p27 2;
#define p28 61;
#define p29 3;
#define p30 32;
#define p31 73;
#define p32 7;
#define p33 150;
#define p34 4;
#define p35 65;
#define p36 17;
#define p37 9;
#define p38 26;
#define p39 152;
#define p40 4;
#define p41 40;
#define p42 3;
#define p43 0;
#define p44 2;
#define p45 193;
#define p46 57;
#define p47 316;
#define p48 37;
#define p49 137;
#define p50 41;
#define p51 297;
#define p52 151;
#define p53 92;
#define p54 102;
#define p55 184;
#define p56 92;
#define p57 134;
#define p58 410;
#define p59 58;
#define p60 196;
#define p61 0;
#define p62 0;
#define p63 1;
#define p64 59;
#define p65 139;
#define p66 97;
#define p67 42;
#define p68 163;
#define p69 15;
#define p70 164;
#define p71 9;
#define p72 46;
#define p73 87;
#define p74 1;
#define p75 21;
#define p76 139;
#define p77 33;
#define p78 85;
#define p79 14;
#define p80 164;
#define p81 44;
#define p82 64;
#define p83 29;
#define p84 0;
#define p85 27;
#define p86 19;
#define p87 5;
#define p88 45;
#define p89 1;
#define p90 21;
#define p91 25;
#define p92 5;
#define p93 1;
#define p94 86;
#define p95 4;
#define p96 24;
#define p97 33;
#define p98 9;
#define p99 54;
#define p100 174;
#define p101 3;
#define p102 62;
#define p103 64;
#define p104 15;
#define p105 112;
#define p106 6;
#define p107 50;
#define p108 165;
#define p109 80;
#define p110 123;
#define p111 0;
#define p112 0;
#define p113 0;
#define p114 41;
#define p115 97;
#define p116 193;
#define p117 270;
#define p118 149;
#define p119 84;
#define p120 144;
#define p121 131;
#define p122 161;
#define p123 177;
#define p124 32;
#define p125 10;
#define p126 13;
#define p127 278;
#define p128 121;
#define p129 258;
#define p130 70;
#define p131 171;
TieBreakGame = WhoServe1st; (Player1Serve [] Player2Serve);
WhoServe1st = []i:{f_de_ct,n_de_ct}@ TossCoin{turn = i} -> Skip;
Player1Serve = [won == na && turn == f_de_ct ]FedReady_DeCt -> De_Ply1Serve [] [won == na && turn == f_ad_ct] FedReady_AdCt -> Ad_Ply1Serve;
Player2Serve = [won == na && turn == n_de_ct]NadReady_DeCt -> De_Ply2Serve [] [ won == na && turn == n_ad_ct] NadReady_AdCt -> Ad_Ply2Serve;
NextPt = Player1Serve [] Player2Serve [] ([won != na] GameOver -> Skip);

De_Ply1Serve = pcase {                             
			p0: ServeT_in{ball=5} -> Ply2_BackHandR  
			p1: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p2: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p3: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p4: Serve_err{ball=9} -> De_Ply1Serve_2nd}; 

De_Ply1Serve_2nd = pcase {                 //1st serve is out
			p5: ServeT_in{ball=5} -> Ply2_BackHandR  
			p6: ServeBody_in{ball=6} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p7: ServeWide_in{ball=6} -> Ply2_ForeHandR 
			p8: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p9: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };

Ad_Ply1Serve = pcase {
			p10: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p11: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p12: ServeWide_in{ball=4} -> Ply2_BackHandR
			p13: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p14: Serve_err{ball=9} -> Ad_Ply1Serve_2nd}; 

Ad_Ply1Serve_2nd = pcase {                 //1st serve is out
			p15: ServeT_in{ball=5} -> Ply2_ForeHandR  
			p16: ServeBody_in{ball=4} -> (Ply2_BackHandR [] Ply2_ForeHandR)
			p17: ServeWide_in{ball=4} -> Ply2_BackHandR
			p18: Serve_winner{ball=9} -> FWinner{fscore++; if (fscore == points) {won = player1} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
			p19: Serve_err{ball=9} -> Fdoublefault{nscore++; if (nscore == points) {won = player2} 
      		                                                        else { turn = (turn+1)%4} }-> NextPt
     		 };    
     		 
Ply1_ForeHandR = ifa (turn == n_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
		 pcase {
			p20: FH_InsideOut{ball=6} -> Ply2_de_stroke
			p21: FH_InsideIn{ball=4} -> Ply2_ad_stroke
			p22: FH_CrossCourt{ball=4} -> Ply2_ad_stroke
			p23: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p24: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p25: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p26: FH_CrossCourt{ball=4} -> Ply2_ad_stroke
			p27: FH_DownLine{ball=6} -> Ply2_de_stroke
			p28: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p29: FH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p30: FH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

Ply1_BackHandR = ifa (turn == n_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		 pcase {
			p31: BH_CrossCourt{ball=6} -> Ply2_de_stroke
			p32: BH_DownLine{ball=4} -> Ply2_ad_stroke
			p33: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p34: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p35: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p36: BH_CrossCourt{ball=6} -> Ply2_de_stroke
			p37: BH_InsideIn{ball=6} -> Ply2_de_stroke
			p38: BH_InsideOut{ball=4} -> Ply2_ad_stroke
			p39: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p40: BH_Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p41: BH_Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};

// deuce stroke is when player1 hit position is 1
Ply1_de_stroke = pcase{
			p42: FH_InsideOut{ball=6} -> Ply2_de_stroke
			p43: FH_InsideIn{ball=4} -> Ply2_ad_stroke
			p44: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p45: BH_Crosscourt{ball=6} -> Ply2_de_stroke
			p46: BH_Downline{ball=4} -> Ply2_ad_stroke
			p47: BH_DownMid{ball=5} -> Ply2_mid_stroke			
			p48: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p49: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};
	
// mid stroke is when player1 hit position is 2
Ply1_mid_stroke = pcase{
			p50: FH_InsideOut{ball=6} -> Ply2_de_stroke
			p51: FH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p52: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p53: BH_InsideOut{ball=4} -> Ply2_ad_stroke
			p54: BH_Crosscourt{ball=6} -> Ply2_de_stroke
			p55: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p56: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p57: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt    
	};


// ad stroke is when player1 hit position is 3
Ply1_ad_stroke = pcase{
			p58: FH_Crosscourt{ball=4} -> Ply2_ad_stroke
			p59: FH_Downline{ball=6} -> Ply2_de_stroke
			p60: FH_DownMid{ball=5} -> Ply2_mid_stroke
			p61: BH_InsideIn{ball=6} -> Ply2_de_stroke
			p62: BH_InsideOut{ball=4} -> Ply2_ad_stroke
			p63: BH_DownMid{ball=5} -> Ply2_mid_stroke
			p64: Winner{ball=9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p65: Error{ball=9} -> {nscore++; if (nscore == points) {won = player2}
      		                                                     else { turn = (turn+1)%4} }-> NextPt  
	};


De_Ply2Serve = pcase {
			p66 : ServeT_in{ball=2} -> Ply1_ForeHandR
			p67: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p68: ServeWide_in{ball=1} -> Ply1_BackHandR
			p69: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p70: Serve_err{ball=9} -> De_Ply2Serve_2nd}; 

De_Ply2Serve_2nd = pcase {                 //1st serve is out
			p71: ServeT_in{ball=2} -> Ply1_ForeHandR
			p72: ServeBody_in{ball=1} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p73: ServeWide_in{ball=1} -> Ply1_BackHandR
			p74: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p75: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ad_Ply2Serve = pcase {
			p76: ServeT_in{ball=2} -> Ply1_BackHandR
			p77: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p78: ServeWide_in{ball=3} -> Ply1_ForeHandR
			p79: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p80: Serve_err{ball=9} -> Ad_Ply2Serve_2nd}; 

Ad_Ply2Serve_2nd = pcase {                 //1st serve is out
			p81: ServeT_in{ball=2} -> Ply1_BackHandR
			p82: ServeBody_in{ball=3} -> (Ply1_ForeHandR [] Ply1_BackHandR)
			p83: ServeWide_in{ball=3} -> Ply1_ForeHandR
			p84: Serve_Winner{ball=9} -> NWinner{nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p85: Serve_err{ball=9} -> Ndoublefault{fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
     		 };
     		 
Ply2_ForeHandR = ifa (turn == f_de_ct) {    // Player2 backhand return to Player1 serve from the deuce court side
		  pcase {
			p86: FH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p87: FH_DownLine { ball = 3} -> Ply1_ad_stroke
			p88: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p89: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p90: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
      			p91: FH_InsideOut{ ball = 3} -> Ply1_ad_stroke
			p92: FH_InsideIn{ball = 1} -> Ply1_de_stroke
			p93: FH_CrossCourt{ball = 1} -> Ply1_de_stroke
			p94: FH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p95: FH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p96: FH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }};
      		 
Ply2_BackHandR = ifa (turn == f_de_ct) {    // Player2 forehand return to Player1 serve from the deuce court side
			pcase {
			p97: BH_CrossCourt{ ball = 3} -> Ply1_ad_stroke
			p98: BH_InsideIn{ball = 3} -> Ply1_ad_stroke
			p99: BH_InsideOut{ ball = 1} -> Ply1_de_stroke
			p100: BH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p101: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p102: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
      		 }}
      		 else {
      		pcase {
			p103: BH_CrossCourt{ ball = 3} -> Ply1_ad_stroke
			p104: BH_DownLine{ ball = 1} -> Ply1_de_stroke
			p105: BH_DownMid{ ball = 2} -> Ply1_mid_stroke
			p106: BH_Winner{ball=9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p107: BH_Error{ ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt			
      		 }};

// deuce stroke is when player2 hit position is 6
Ply2_de_stroke = pcase { // if already 
			p108: FH_Crosscourt { ball = 1;} -> Ply1_de_stroke
			p109: FH_Downline { ball = 3} -> Ply1_ad_stroke
			p110: FH_DownMid { ball = 2} -> Ply1_mid_stroke
			p111: BH_InsideIn {ball = 3} -> Ply1_ad_stroke
			p112: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			p113: BH_DownMid { ball = 2} -> Ply1_mid_stroke
			p114: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p115: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// mid stroke is when player2 hit position is 5
Ply2_mid_stroke = noMove -> pcase{
			p116: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p117: FH_Crosscourt{ball = 1} -> Ply1_de_stroke
			p118: FH_DownMid { ball = 2 } -> Ply1_mid_stroke
			p119: BH_InsideOut { ball = 1} -> Ply1_de_stroke
			p120: BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p121: BH_DownMid { ball = 2} -> Ply1_mid_stroke
			p122: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p123: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};

// ad stroke is when player 2 hit position is 4
Ply2_ad_stroke = pcase{
			p124: FH_InsideOut { ball = 3} -> Ply1_ad_stroke
			p125: FH_InsideIn { ball = 1} -> Ply1_de_stroke
			p126: FH_DownMid { ball = 2} -> Ply1_mid_stroke
			p127: BH_Crosscourt { ball = 3} -> Ply1_ad_stroke
			p128: BH_Downline { ball = 1} -> Ply1_de_stroke
			p129: BH_DownMid { ball = 2 } -> Ply1_mid_stroke
			p130: Winner{ ball = 9} -> {nscore++; if (nscore == points) {won = player2} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt
			p131: Error { ball = 9} -> {fscore++; if (fscore == points) {won = player1} 
      		                                                     else { turn = (turn+1)%4} }-> NextPt 
	};    		             

#define player1Win won == player1;
#assert TieBreakGame reaches player1Win with prob;